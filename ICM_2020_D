#-*-coding:GBK -*-
import xlrd
import math
import copy
import os
#import numpy

choose=2
#4:1-38场比赛一一处理，对手视角，共38场
#3：对于38场比赛，合并同对手的比赛，共19场，对手角度
#2:对于同一场比赛，分时间去跑数据
#1-38场比赛一一处理，huskies角度,共38场
#0:处理一个赛季，huskies角度

maxn=30#跑huskie的数据的时候换成30

INF=2000000000
#足球场长和宽
Lenth=105
Width=68
kesaiL=0.37
kesaiS=0.95

class TRIADIC:
    def __init__(self,id,i,j,k,tot,core):
        self.id=id
        self.i=i
        self.j=j
        self.k=k
        self.tot=tot
        self.core=core
    def __str__(self):
        return "id:%d, core:%d" % (self.id, self.core)

def str2num(str):
    if(str=='D'):
        return -1
    if(str=='F'):
        return 9
    if(str=='G'):
        return 15
    if(str=='M'):
        return 16

def num2str(num):
    if(num>=0 and num<10):
        return 'D'+str(num+1)
    elif(num>=10 and num<16):
        return 'F'+str(num-10+1)
    elif(num==16):
        return 'G1'
    else:
        return 'M'+str(num-17+1)


def str2no(str):
    if(str[-2]=='1'):
        return str2num(str[-3])+int(str[-1])+10
    else:
        return str2num(str[-2])+int(str[-1])

def str2num_op(str):
    if(str=='D'):
        return -1
    if(str=='F'):
        return 9
    if(str=='G'):
        return 15
    if(str=='M'):
        return 17

def num2str_op(num):
    if(num>=0 and num<10):
        return 'D'+str(num+1)
    elif(num>=10 and num<16):
        return 'F'+str(num-10+1)
    elif(num==16):
        return 'G1'
    elif(num==17):
        return 'G2'
    else:
        return 'M'+str(num-18+1)

def str2no_op(str):
    if(str[-2]=='1'):
        return str2num_op(str[-3])+int(str[-1])+10
    else:
        return str2num_op(str[-2])+int(str[-1])

def judge_pass(pass_type):
    if(pass_type=="High pass"):
        return 0
    else:
        return 1

def outcome2num(str):
    if(str=='win'):
        return 1
    elif(str=='loss'):
        return -1
    else:
        return 0

def home2num(str):
    if(str=='home'):
        return 1
    else:
        return 0

def read_rows(file):
    book = xlrd.open_workbook(file)
    sheet1 = book.sheets()[0]
    nrows = sheet1.nrows
    return nrows

def read_match(file,txt_number):
    book = xlrd.open_workbook(file)
    sheet1 = book.sheets()[0]
    outcome=outcome2num(sheet1.cell(txt_number,2).value)
    home=home2num(sheet1.cell(txt_number,5).value)
    return (outcome,home)


def read(file):
    book = xlrd.open_workbook(file)
    sheet1 = book.sheets()[0]
    nrows = sheet1.nrows
    # print('表格总行数',nrows)
    ncols = sheet1.ncols
    # print('表格总列数',ncols)
    # row3_values = sheet1.row_values(2)
    #
    # print('第3行值', row3_values)

    col3_values = sheet1.col_values(2)

    #print('第3列值', col3_values)

    sender=col3_values

    col4_values = sheet1.col_values(3)

    #print(col4_values)

    reciever = col4_values

    col7_values = sheet1.col_values(6)

    pass_type=col7_values

    col8_values = sheet1.col_values(7)

    sender_x=col8_values

    col9_values = sheet1.col_values(8)

    sender_y=col9_values

    col10_values = sheet1.col_values(9)

    receiver_x=col10_values

    col11_values = sheet1.col_values(10)

    receiver_y = col10_values

    P = [([0] * maxn) for i in range(maxn)]

    C = [([0] * maxn) for i in range(maxn)]

    B = [([0] * maxn) for i in range(maxn)]

    vis=[0]*maxn

    flag=0

    for v1,v2,type,x1,y1,x2,y2 in zip(col3_values,col4_values,col7_values,col8_values,col9_values,col10_values,col11_values):
        #print(v1,v2)
        #print(v1[-2]+v1[-1])
        if(flag==1):
            num1 = str2no(v1)
            num2 = str2no(v2)
            #print(v1,v2)
            #print(num1,num2)
            if(choose==3):
                num1=str2no_op(v1)
                num2=str2no_op(v2)
            vis[num1] = 1
            vis[num2] = 1
            alpha=1-judge_pass(type)
            beta=judge_pass(type)
            #print(num1,num2)
            P[num1][num2] = P[num1][num2] + 1
            x1=x1*Lenth/100
            x2=x2*Width/100
            dist=math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
            C[num1][num2]=C[num1][num2]+(alpha*kesaiL+beta*kesaiS)/dist
            B[num1][num2]=B[num1][num2]+(alpha*(1-kesaiL)+beta*(1-kesaiS))*dist
        flag=1

    player_number=0
    for i in range(0,maxn):
        if(vis[i]==1):
            player_number=player_number+1

    # for i in P:
    #     for j in i:
    #         print(j, " ", end='')
    #     print("\n")
    # print("\n")
    # for i in C:
    #     for j in i:
    #         print('%.1f' %j, " ", end='')
    #     print("\n")
    # print("\n")
    # for i in B:
    #     for j in i:
    #         print('%.1f' %j, " ", end='')
    #     print("\n")
    # print("\n")

    return (P,C,B,nrows,player_number)

def dist_num(P,start,end,passing):
    Temp=copy.deepcopy(P)
    cnt=0
    cnt2=0
    stack=[]
    vis=[0]*maxn
    #vis[start]=1
    stack.append(start)
    while(len(stack)!=0):
        #print(len(stack))
        # for j in stack:
        #     print(j,end=' ')
        # print("\n")
        flag=0
        i=stack[-1]
        vis[i]=1
        for j in range(0,maxn):
            if(Temp[i][j]!=0 and vis[j]==0 and not(j in stack)):
                stack.append(j)
                vis[j]=1
                flag=1
                break
        if(flag==0):
            stack.pop()
            for j in range(0,maxn):
                Temp[i][j]=0
        if(i==end):
            vis[i]=0
            minimum=INF
            for j in range(0,len(stack)):
                if(minimum>stack[j]):
                    minimum=stack[j]
            cnt=cnt+minimum
            if(passing in stack):
                cnt2=cnt2+minimum
            stack.pop()
    return (cnt,cnt2)

def Team_Factor(Close,CB,P,player_number):
    # 求H：
    # 求C矩阵平均数
    ave_C = 0
    for i in range(0, maxn):
        ave_C = ave_C + Close[i]
    ave_C = ave_C / maxn
    # 求CB矩阵的平均数
    ave_CB = 0
    for i in range(0, maxn):
        ave_CB = ave_CB + CB[i]
    ave_CB = ave_CB / maxn
    # 求CB矩阵的标准差
    cnt = 0
    for i in range(0, maxn):
        cnt = cnt + (Close[i] - ave_C) * (Close[i] - ave_C)
    cnt = cnt / player_number
    SD_C = math.sqrt(cnt)

    cnt=0
    for i in range(0, maxn):
        cnt = cnt + (CB[i] - ave_CB) * (CB[i] - ave_CB)
    cnt = cnt / player_number
    SD_CB = math.sqrt(cnt)

    #print(SD_C,SD_CB)

    # 求P矩阵的和
    tot_P = 0
    for i in range(0, maxn):
        for j in range(0, maxn):
            tot_P = tot_P + P[i][j]
    # 求H
    # H=math.log(mutual_proportion*ave_C*ave_CB*tot_P/SD_CB,math.e)
    # for i in range(0,maxn):
    #     print(CB[i])
    H=0
    if(SD_CB!=0 and mutual_proportion * ave_C * ave_CB * tot_P / SD_CB!=0):
        H = math.pow(math.log(mutual_proportion * ave_C * ave_CB * tot_P / SD_CB, math.e), 1)
        zero_tag=0
    else:
        zero_tag=1
    #H = math.pow(math.log(mutual_proportion * ave_C * ave_CB * tot_P , math.e), 1)
    return (ave_C,ave_CB,SD_CB,tot_P,H,zero_tag)



for match in range(1,39):
    print("match:",match)
    H1 = 0
    H0 = 0
    home = 0
    outcome = 0
    Hkie=0
    Hop=0
    flag_76=1
    for txt_number in range(2, 78):
        if(flag_76==1):
            if(txt_number%2==0):
                choose=1
            else:
                choose=4
            txt_number=txt_number//2
        if (choose == 1):
            file = 'match_' + str(txt_number) + '_huskies.xlsx'
            file_match='matches.xlsx'
            #print(txt_number)
            result1=read_match(file_match,txt_number)
            outcome=result1[0]
            home=result1[1]
        elif (choose == 0):
            file = 'passingevent_huskies.xlsx'
        elif (choose == 2):
            file = 'match_' + str(match) + '_huskies_' + str(txt_number) + '.xlsx'
        elif (choose == 3):
            file = 'match_op' + str(txt_number) + '.xlsx'
            file_shot = 'shot_op' + str(txt_number) + '.xlsx'
        elif(choose==4):
            file = 'match_' + str(txt_number) + '_op.xlsx'

        result = read(file)
        P = result[0]
        C = result[1]
        B = result[2]
        player_number = result[4]

        # for i in range(0,maxn):
        #     for j in range(0,maxn):
        #         print(P[i][j],end=' ')
        #     print("\n")
        #
        # for i in range(0,maxn):
        #     print(num2str(i),end=' ')

        #print("number:", player_number)
        # 3.1紧密度

        Close = [0] * maxn
        for i in range(0, maxn):
            for j in range(0, maxn):
                Close[i] = Close[i] + C[i][j] + C[j][i]

        # 3.2中间性
        L = [([0] * maxn) for i in range(maxn)]
        Li = [[[0] * maxn for _ in range(maxn)] for _ in range(maxn)]
        # Li = [([([0] * maxn) for i in range(maxn)]*maxn) for i in range(maxn)]
        for i in range(0, maxn):
            for j in range(0, maxn):
                for k in range(0, maxn):
                    if (j == k):
                        L[j][k] = 0
                        Li[i][j][k] = 0
                    else:
                        rst = dist_num(P, j, k, i)
                        L[j][k] = rst[0]
                        # print(rst[1])
                        Li[i][j][k] = rst[1]

        CB = [0] * maxn
        for i in range(0, maxn):
            for j in range(0, maxn):
                for k in range(0, maxn):
                    if (i != j and j != k and L[j][k] != 0):
                        CB[i] = CB[i] + Li[i][j][k] / L[j][k]

        # for i in L:
        #     for j in i:
        #         print(j, " ", end='')
        #     print("\n")
        # print("\n")

        # 3.3单传互传核心数

        single = 0
        mutual = 0
        for i in range(0, maxn):
            for j in range(0, maxn):
                single = single + abs(P[i][j] - P[j][i])
                mutual = mutual + min(P[i][j], P[j][i])
        mutual_proportion = mutual / (single + mutual)
        Core_infector = [0] * maxn
        Triple = []
        cnt = 0
        for i in range(0, maxn):
            for j in range(0, maxn):
                for k in range(0, maxn):
                    Triple.append(TRIADIC(cnt, i, j, k, P[j][i] + P[k][i] + P[i][j] + P[k][j] + P[i][k] + P[j][k], i))
                    cnt = cnt + 1
        Triple.sort(key=lambda x: x.tot, reverse=True)
        for eg in range(0, int(len(Triple) * 0.1)):
            i = Triple[eg].i
            j = Triple[eg].j
            k = Triple[eg].k

            if (P[j][i] + P[k][i] > P[i][j] + P[k][j]):
                if (P[j][i] + P[k][i] > P[i][k] + P[j][k]):
                    Core_infector[i] = Core_infector[i] + 1
                elif (P[j][i] + P[k][i] == P[i][k] + P[j][k]):
                    Core_infector[i] = Core_infector[i] + 1
                    Core_infector[k] = Core_infector[k] + 1
                else:
                    Core_infector[k] = Core_infector[k] + 1
            elif (P[j][i] + P[k][i] == P[i][j] + P[k][j]):
                Core_infector[i] = Core_infector[i] + 1
                Core_infector[j] = Core_infector[j] + 1
            else:
                if (P[i][j] + P[k][j] > P[i][k] + P[j][k]):
                    Core_infector[j] = Core_infector[j] + 1
                elif (P[i][j] + P[k][j] == P[i][k] + P[j][k]):
                    Core_infector[j] = Core_infector[j] + 1
                    Core_infector[k] = Core_infector[k] + 1
                else:
                    Core_infector[k] = Core_infector[k] + 1

        # 传出率：
        Pout = [0] * maxn
        for i in range(0, maxn):
            cnt1 = 0
            cnt2 = 0
            for j in range(0, maxn):
                if (i != j):
                    cnt1 = cnt1 + (P[i][j] - P[j][i])
                cnt2 = cnt2 + P[i][j]
            if (cnt2 != 0):
                Pout[i] = cnt1 / cnt2
            else:
                Pout[i] = 0
        # print(Pout[16])
        # print("3.1")
        # for i in range(0,maxn):
        #     print(i,Close[i])
        # print("3.2:")
        # for i in range(0,maxn):
        #     print(i,CB[i])
        # print("3.3:")
        # print("dyadic:")
        # print("single:",single)
        # print("mutual:",mutual)
        # print("mutual proportion:",mutual/(single+mutual))
        # print("triadic:")
        # for i in range(0,maxn):
        #     print(i,Core_infector[i])
        # for i in range(0,maxn):
        #     print(Pout[i],end=' ')
        # print("\n")

        # 可信任度

        with open('temp.txt', 'r') as f:
            content = f.readline()
            X = content.split(",")
            X = list(map(float, X))
        if (choose != 0 and txt_number == 1):  ##########!!!!!!!!!!!!!这个choose可能有问题的！！！！！！！
            X = [1] * maxn
        # print(X)

        Lbig = [([0] * maxn) for i in range(maxn)]
        for i in range(0, maxn):
            for j in range(0, maxn):
                cnt = 0
                for k in range(0, maxn):
                    cnt = cnt + B[j][k]
                if (cnt == 0):
                    Lbig[i][j] = 0
                else:
                    Lbig[i][j] = B[i][j] / cnt
        Temp = copy.deepcopy(X)
        for i in range(0, maxn):
            cnt = 0
            for j in range(0, maxn):
                if (i != j):
                    cnt = cnt + Lbig[i][j] * Temp[j]
            X[i] = cnt + 1

        rst = Team_Factor(Close, CB, P, player_number)
        ave_C = rst[0]
        ave_CB = rst[1]
        SD_CB = rst[2]
        tot_P = rst[3]
        H = rst[4]
        zero_tag=rst[5]
        # print(SD_CB)

        if (choose == 1):
            print(txt_number)
            if(flag_76==1):
                print("Huskies")
                if(home==1):
                    H1=H
                else:
                    H0=H
                    #outcome=-outcome
                Hkie=H
            with open('temp.txt', 'w+') as f:
                for i in range(0, maxn):
                    if (i == 0):
                        f.write(str('%.2f' % X[i]))
                    else:
                        f.write("," + str('%.2f' % X[i]))
            # 以写的方式打开文件，如果文件不存在，就会自动创建
            with open('ans' + str(txt_number) + '.txt', 'w+') as f:
                for i in range(0, maxn):
                    f.write('\n' + str('%.2f' % Close[i]) + ' ' + str('%.2f' % Pout[i]) + ' ' + str(
                        '%.2f' % CB[i]) + ' ' + str('%.2f' % X[i]) + ' ' + str('%.2f' % Core_infector[i]))
            with open('Team_Factor.txt', 'a') as f:
                f.write('\n' + str(txt_number) + ' ' + str('%.2f' % ave_C) + ' ' + str('%.2f' % ave_CB) + ' ' + str(
                    '%.2f' % SD_CB) + ' ' + str('%.2f' % mutual_proportion) + ' ' + str('%.2f' % H))
        elif (choose == 0):
            print("season")
            with open('ans_season.txt', 'w+') as f:
                for i in range(0, maxn):
                    f.write('\n' + str('%.2f' % Close[i]) + ' ' + str('%.2f' % Pout[i]) + ' ' + str(
                        '%.2f' % CB[i]) + ' ' + str('%.2f' % X[i]) + ' ' + str('%.2f' % Core_infector[i]))
            break
        elif (choose == 2):
            print(txt_number)
            if(zero_tag==1):
                continue
            with open('Team_Factor_match_'+str(match)+'.txt', 'a') as f:
                f.write('\n' + str(txt_number) + ' ' + str('%.2f' % ave_C) + ' ' + str('%.2f' % ave_CB) + ' ' + str(
                    '%.2f' % SD_CB) + ' ' + str('%.2f' % mutual_proportion) + ' ' + str('%.2f' % H))
        elif (choose == 3):
            print(txt_number)
            print(player_number)
            file_shot = 'shot_op' + str(txt_number) + '.xlsx'
            num_shot = read_rows(file_shot) - 1
            num_shot = math.log(num_shot, math.e)
            with open('op.txt', 'a') as f:
                f.write('\n' + str('%.2f' % H) + ' ' + str('%.2f' % num_shot))
        elif(choose==4):
            print("op")
            if(home==1):
                H0=H
            else:
                H1=H
            Hop=H
            with open('Home_Away_Outcome_Match.txt', 'a') as f:
                f.write('\n' + str(txt_number) + ' ' + str('%.2f' % H1) + ' ' + str('%.2f' %H0)+' '+str('%d' %outcome))
            if(home==1):
                with open('Home_Hus_Op_Outcome_Match.txt', 'a') as f:
                    f.write('\n' + str(txt_number) + ' ' + str('%.2f' % Hkie) + ' ' + str('%.2f' % Hop) + ' ' + str('%d' % outcome))
            else:
                with open('Away_Hus_Op_Outcome_Match.txt', 'a') as f:
                    f.write('\n' + str(txt_number) + ' ' + str('%.2f' % Hkie) + ' ' + str('%.2f' % Hop) + ' ' + str('%d' % outcome))


    if(choose!=2):
        break
    elif(zero_tag==1):
        continue
